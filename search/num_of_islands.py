from collections import deque
from typing import List

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        height = len(grid)
        cnt = 0
        if height == 0:
            return 0
        width = len(grid[0])
        if width == 0:
            return 0
        for i in range(height):
            for j in range(width):
                if grid[i][j] == '1':
                    cnt += 1
                    self.bfs(grid, i, j, height, width)
        return cnt

    def bfs(self, grid: List[List[str]], i: int, j: int, height: int, width: int):
        grid[i][j] = '0'
        que = deque()
        que.append((i, j))
        while len(que) > 0:
            i1, j1 = que.popleft()
            # 如果不预先置为0 会死循环
            if i1-1 >= 0 and grid[i1-1][j1] == '1':
                grid[i1-1][j1] = '0'
                que.append((i1-1, j1))
            if i1+1 < height and grid[i1+1][j1] == '1':
                grid[i1+1][j1] = '0'
                que.append((i1+1, j1))
            if j1-1 >= 0 and grid[i1][j1-1] == '1':
                grid[i1][j1-1] = '0'
                que.append((i1, j1-1))
            if j1+1 < width and grid[i1][j1+1] == '1':
                grid[i1][j1+1] = '0'
                que.append((i1, j1+1))

if __name__ == "__main__":
    grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
    s = Solution()
    cnt = s.numIslands(grid)
    print(cnt)